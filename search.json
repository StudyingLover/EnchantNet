[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "___           ___           ___       ___       ___     \n     /\\__\\         /\\  \\         /\\__\\     /\\__\\     /\\  \\    \n    /:/  /        /::\\  \\       /:/  /    /:/  /    /::\\  \\   \n   /:/__/        /:/\\:\\  \\     /:/  /    /:/  /    /:/\\:\\  \\  \n  /::\\  \\ ___   /::\\~\\:\\  \\   /:/  /    /:/  /    /:/  \\:\\  \\ \n /:/\\:\\  /\\__\\ /:/\\:\\ \\:\\__\\ /:/__/    /:/__/    /:/__/ \\:\\__\\\n \\/__\\:\\/:/  / \\:\\~\\:\\ \\/__/ \\:\\  \\    \\:\\  \\    \\:\\  \\ /:/  /\n      \\::/  /   \\:\\ \\:\\__\\    \\:\\  \\    \\:\\  \\    \\:\\  /:/  / \n      /:/  /     \\:\\ \\/__/     \\:\\  \\    \\:\\  \\    \\:\\/:/  /  \n     /:/  /       \\:\\__\\        \\:\\__\\    \\:\\__\\    \\::/  /   \n     \\/__/         \\/__/         \\/__/     \\/__/     \\/__/    \nHi, I am StudyingLover !👋 \nA Sophomore student at XUPT in computer science and technology. \n\n幻网驭码(EnchantNet)是我新建的一个个人博客，主要是考虑到原本Plus Studio框架的一些局限性，例如只能生成html，不能展示python代码的效果，难以加入引入使得很难进行严肃文章的写作等等 。所以有了这个网站，我选用了quarto 进行写作，这个网站我会分享一些更加严肃文章和一些使用jupyter notebook开发的文章。\n网站名叫做幻网驭码(EnchantNet)，是我与gpt多轮讨论的结果，怎么给他一个完整的释义等以后慢慢说吧。"
  },
  {
    "objectID": "posts/绩点自动计算/index.html",
    "href": "posts/绩点自动计算/index.html",
    "title": "绩点自动计算",
    "section": "",
    "text": "又到了一年一度的绩点计算时期，在传统的计算过程中，我们受限于班长，团支书或者其他人极其有限的手算能力而很难快速计算，所以为什么不能有一个自动计算的脚本呢？\n这个问题和大部分的数据科学竞赛数据处理部分是基本相同的，大概就是根据规则处理数据，然后计算得分，最后按照得分排序。\n\n\n\n\n\n\nNote\n\n\n\n这里的数据全部是随机生成的假数据\n\n\n首先把表读进来然后看一下格式，这里用pandas读取excel文件，然后把列名改成Name, Score, Weight。\n\nimport pandas as pd\nimport numpy as np\n# 读取xlsx文件\ndf = pd.read_excel('score.xlsx', header=None)\ndf.columns = ['Name', 'Score', 'Wight']\ndf['Name'] = pd.factorize(df['Name'])[0]\ndf\n\n\n\n\n\n\n\n\nName\nScore\nWight\n\n\n\n\n0\n0\n84\n6\n\n\n1\n0\n73\n5\n\n\n2\n0\n74\n0\n\n\n3\n0\n73\n6\n\n\n4\n0\n87\n3\n\n\n...\n...\n...\n...\n\n\n636\n36\n83\n0\n\n\n637\n36\n65\n5\n\n\n638\n36\n56\n6\n\n\n639\n36\n80\n4\n\n\n640\n36\n100\n5\n\n\n\n\n641 rows × 3 columns\n\n\n\n第一列是姓名，第二行是得分，第三行是学分\n这里简单介绍一下绩点的算法，假设一个人上了4门课，分别是A,B,C,D，分数分别是a,b,c,d，每门课的学分是 \\(S_a\\),\\(S_b\\),\\(S_c\\),\\(S_d\\) ，那么绩点的计算公式是 \\[\nS = \\frac{a*S_a}{S_a+S_b+S_c+S_d}+\\frac{b*S_b}{S_a+S_b+S_c+S_d}+\\frac{c*S_c}{S_a+S_b+S_c+S_d}+\\frac{d*S_d}{S_a+S_b+S_c+S_d}\n\\tag{1}\\]\n我们先处理非数字内容，second_column 是一个 Pandas Series，表示 DataFrame 中的第二列。astype(str) 将 Series 中的所有元素转换为字符串类型，然后 str.isdigit() 方法返回一个布尔类型的 Series，表示每个元素是否为数字。~ 操作符将这个布尔类型的 Series 取反，得到一个新的布尔类型的 Series，表示每个元素是否为非数字。最后，将这个布尔类型的 Series 作为索引，从 second_column 中选择所有非数字值，得到一个新的 Pandas Series，即 non_numeric_values。\n\n# 提取第二列非数字内容\nsecond_column = df.iloc[:, 1]  # 获取第二列数据\n\nnon_numeric_values = second_column[~second_column.astype(str).str.isdigit()]\nset(non_numeric_values)\n\nset()\n\n\n我们可以看到这张表中只有四种非数字内容，我看了一下具体的业务内容，还有一种不及格的可能选项。我们定义一个字典，将他们转换成数字。(思考题：为什么是95在这里是字符串而不是int)\n\ntext2score = {\n    \"优秀\":'95',\n    \"良好\":'85',\n    \"中等\":'75',\n    \"及格\":'65',\n    \"不及格\":'50'\n}\n\ndf.loc[non_numeric_values.index, second_column.name] = non_numeric_values.map(text2score)\ndf\n\n\n\n\n\n\n\n\nName\nScore\nWight\n\n\n\n\n0\n0\n84\n6\n\n\n1\n0\n73\n5\n\n\n2\n0\n74\n0\n\n\n3\n0\n73\n6\n\n\n4\n0\n87\n3\n\n\n...\n...\n...\n...\n\n\n636\n36\n83\n0\n\n\n637\n36\n65\n5\n\n\n638\n36\n56\n6\n\n\n639\n36\n80\n4\n\n\n640\n36\n100\n5\n\n\n\n\n641 rows × 3 columns\n\n\n\n接下来我们需要提取出所有人的名字，all_people是所有人的名字\n\nall_people = []\n\nfor i in range(len(second_column)):\n    all_people.append(df.iloc[i, 0])\nall_people = set(all_people)\nlen(all_people), all_people\n\n(37,\n {0,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11,\n  12,\n  13,\n  14,\n  15,\n  16,\n  17,\n  18,\n  19,\n  20,\n  21,\n  22,\n  23,\n  24,\n  25,\n  26,\n  27,\n  28,\n  29,\n  30,\n  31,\n  32,\n  33,\n  34,\n  35,\n  36})\n\n\n然后取出每个人的成绩，all_score是每个人的成绩，all_weight是对应课程的学分。all_score和all_weight的元素是学生数个列表，每个列表的长度是课程数。\n\nall_weight = []\nall_score = []\nfor i in all_people:\n    # 提取df中Name列为i的所有行\n    df_i = df[df['Name']==i]\n    # 提取df_i中Score列的所有行\n    df_i_score = df_i['Score']\n    # 提取df_i中Weight列的所有行\n    df_i_weight = df_i['Wight']\n    # 求Weight列的和\n    sum_weight = df_i_weight.sum()\n    personal_weight = []\n    for j in df_i_weight:\n        personal_weight.append(j/sum_weight )\n    # print(i,personal_weight,len(personal_weight))\n    all_weight.append(personal_weight)\n    all_score.append(list(df_i_score))\nlen(all_weight), len(all_score)\n\n(37, 37)\n\n\n这里做一下数据类型的转换，你应该知道思考题的答案了吧？\n\nfor i in all_score:\n    for j in range(len(i)):\n        i[j] = np.float64(i[j])\n\n下面按照公式 Equation 1 做计算即可\n\nassert len(all_weight) == len(all_score), \"len(all_weight) != len(all_score)\"\n\nname = []\nfinal_score = []\n\nfor i in range(len(all_weight)):\n    assert len(all_weight[i]) == len(all_score[i]), f\"len(all_weight[{i}]) != len(all_score[{i}])\"\n    weight = np.array(all_weight[i])\n    score = np.array(all_score[i])\n    # inner product\n    # print(list(all_people)[i],np.dot(weight, score))\n    name.append(list(all_people)[i])\n    final_score.append(np.dot(weight, score))\nassert len(final_score)==len(name), \"len(final_score)!=len(name)\"\n\n最后把结果写入excel文件\n\n# 保存name和final_score到一个DataFrame中\ndf_final_score = pd.DataFrame({'Name':name, 'Final Score':final_score})\n\n# 按照Final Score降序排列\ndf_final_score.sort_values(by='Final Score', ascending=False, inplace=True)\n\ndf_final_score.index = range(0, len(df_final_score))\n\ndf_final_score.to_excel('final_score.xlsx', index=False)\ndf_final_score\n\n\n\n\n\n\n\n\nName\nFinal Score\n\n\n\n\n0\n17\n87.758621\n\n\n1\n30\n81.542373\n\n\n2\n11\n81.490196\n\n\n3\n32\n81.287879\n\n\n4\n20\n81.225000\n\n\n5\n10\n80.436620\n\n\n6\n21\n80.166667\n\n\n7\n35\n79.573770\n\n\n8\n36\n78.819672\n\n\n9\n14\n78.023810\n\n\n10\n8\n77.600000\n\n\n11\n31\n77.320755\n\n\n12\n7\n77.163934\n\n\n13\n12\n77.057692\n\n\n14\n0\n76.952381\n\n\n15\n28\n76.558824\n\n\n16\n26\n75.960000\n\n\n17\n16\n75.500000\n\n\n18\n19\n75.372549\n\n\n19\n18\n75.176471\n\n\n20\n34\n75.079365\n\n\n21\n6\n74.378378\n\n\n22\n9\n74.232877\n\n\n23\n33\n74.043478\n\n\n24\n24\n73.959184\n\n\n25\n3\n73.833333\n\n\n26\n15\n73.440000\n\n\n27\n27\n73.254902\n\n\n28\n1\n72.880000\n\n\n29\n4\n72.170732\n\n\n30\n13\n71.960784\n\n\n31\n29\n71.413043\n\n\n32\n2\n70.869565\n\n\n33\n22\n70.719298\n\n\n34\n25\n70.660000\n\n\n35\n5\n70.612245\n\n\n36\n23\n70.250000"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EnchantNet",
    "section": "",
    "text": "绩点自动计算\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nAug 30, 2023\n\n\nStudyingLover\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nAug 29, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nAug 27, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  }
]